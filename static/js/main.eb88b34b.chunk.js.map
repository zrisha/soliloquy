{"version":3,"sources":["actions/thinkaloud.js","ThinkAloud/Word.js","ThinkAloud/Line.js","ThinkAloud/LineTA.js","ThinkAloud/LineHover.js","ThinkAloud/Menu.js","ThinkAloud/Thoughts.js","ThinkAloud/ThinkAloud.js","util.js","reducers/index.js","reducers/thinkaloud.js","reducers/params.js","middleware/api.js","middleware/logging.js","serviceWorker.js","index.js"],"names":["startThinkaloud","lineNum","type","queryLines","lineData","dispatch","getState","lineOrder","thinkaloud","i","length","line","order","activeLine","message","success","nextLine","trigger","triggerThought","thought","hoverThought","endThinkaloud","setConfig","data","Word","props","htmlToReact","HtmlToReact","Parser","className","this","colorTA","colored","parse","children","Component","Line","words","offset","split","map","word","key","offText","style","visibility","lineKey","LineTA","state","coloredWord","tooltip","mounted","colorWord","setState","launchThought","wordNode","wordDelay","commaDelay","queryThought","re","RegExp","delay","test","setTimeout","bind","dataTA","tooltips","lnOrder","range","start","end","renderWords","LineHover","Menu","progress","completed","Math","round","maxLine","onClick","size","icon","faPlay","disabled","percent","width","Thoughts","thoughtClicked","onHover","onMouseLeave","debouncedOnHover","debounce","hovered","cancel","orderedThoughts","linesTA","flatMap","sort","a","b","ref","thoughtRef","content","faRightLong","classname","hoveredThought","onMouseEnter","renderThoughts","ThinkAloud","startingLine","window","soliloquy","text","title","lines","slice","unshift","getMaxLine","nextProps","running","allLines","max","breakCount","args","includes","lineDelay","spinning","hasOwnProperty","id","renderLines","connect","params","actions","isValidURL","str","isObject","obj","Object","prototype","toString","call","isJson","item","JSON","e","rootReducer","combineReducers","action","assign","callbacks","on","callback","onComplete","listeners","store","next","logging","statement","time","Date","now","toISOString","actor","moreInfo","auth","serverUrl","statements","complete","timestamp","object","Boolean","location","hostname","match","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","renderThinkAloud","console","log","axios","get","res","taData","error","domTarget","document","getElementById","name","uuidv4","middleware","reduxThunk","createStore","reducers","applyMiddleware","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.eb88b34b.chunk.js","sourcesContent":["import {message} from 'antd';\n\n//ThinkAloud\n\nexport function startThinkaloud(lineNum = 1){\n  return {\n    type: 'START_THINKALOUD',\n    lineNum\n  }\n}\n\nexport function queryLines(lineData){\n  return (dispatch, getState) => {\n    const { lineOrder } = getState().thinkaloud;\n\n    for(let i=0; i < lineData.length; i++){\n      const line = lineData[i], lineNum = i;\n\n      for(let i=0; i < line.order.length; i++){\n        if(line.order[i] === lineOrder){\n          dispatch ({ type: 'SELECT_LINE', activeLine: lineNum });\n          return\n        }\n      }\n    }\n    dispatch ({ type: 'END_THINKALOUD' });\n    message.success(\"Activity Complete\");\n  }\n}\n\nexport function nextLine(trigger){\n  if(trigger && trigger === \"user\"){\n    return {\n      type: 'USER_NEXT_LINE'\n    }\n  }\n  else{\n    return {\n      type: 'NEXT_LINE'\n    }\n  }\n}\n\nexport function triggerThought(thought){\n  return {\n    type: 'TRIGGER_THOUGHT',\n    thought\n  }\n}\n\nexport function hoverThought(thought){\n  return {\n    type: 'HOVER_THOUGHT',\n    thought\n  }\n}\n\nexport function endThinkaloud(){\n  return {\n    type: 'END_THINKALOUD'\n  }\n}\n\n//Mounts config data into state\nexport function setConfig(data){\n  return {\n    type: \"SET_CONFIG\",\n    data\n  }\n}","import { Component } from 'react';\nimport HtmlToReact from 'html-to-react';\nimport '../styles/Word.css';\n\n\n\n\nclass Word extends Component {\n  constructor(props){\n    super(props);\n    this.htmlToReact = new HtmlToReact.Parser();\n  }\n\n  render(){\n\n    let className;\n    if(this.props.colorTA)\n      className = 'word colorTA';\n    else if(this.props.colored)\n      className = 'word colored';\n    else\n      className = 'word';\n\n    const word = this.htmlToReact.parse('<span class=\"'+className+'\">'+this.props.children+' </span>');\n    return word;\n  }\n}\n\nexport default Word;\n","import React from 'react';  // eslint-disable-line no-unused-vars\nimport Word from './Word.js';\nimport '../styles/Line.css';\n\nfunction Line(props){\n  let words, offset;\n\n  if(props.className === 'title')\n    words = (<h2>{props.children}</h2>);\n  else\n    words = props.children.split(' ').map((word, key) => <Word key={key}>{word}</Word>);\n\n  if(props.offText)\n    offset =  <span style={{visibility: 'hidden'}}>{props.offText}</span>\n\n  return (\n    <li key = {props.lineKey} className = {props.className}>\n      {offset} {words}\n    </li>\n  );\n}\n\nexport default Line;\n","import React, { Component } from 'react';\nimport Word from './Word.js';\nimport '../styles/Line.css';\n\nclass LineTA extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      coloredWord: null,\n      tooltip: null\n    };\n  }\n\n  componentDidMount(){\n    this.mounted = true;\n    this.colorWord();\n  }\n\n  componentWillUnmount(){\n    this.mounted = false;\n    this.setState({\n      coloredWord: null,\n      tooltip: null\n    });\n  }\n\n  renderWords(coloredWord) {\n    if(this.props.thought){\n      let line = this.launchThought(this.props.thought);\n      return line;\n    }\n    const words = this.props.words.map(function(wordNode, key){\n      const colorTA = coloredWord === key ? true : false;\n      const ele = <Word colorTA={colorTA} key={'word_'+ key}>{wordNode}</Word>;\n      return ele;\n    });\n    return words;\n  }\n\n  //recursion to color each word of line\n  colorWord(i=0) {\n    if(!this.mounted)\n      return;\n\n    const {words, wordDelay, commaDelay} = this.props;\n    //Check if last of the array\n    if(i+1 > words.length){\n      this.setState({coloredWord: null});\n      this.queryThought();\n      return;\n    }\n\n    let re = new RegExp('[,–.—;:]');\n\n    const delay = re.test(words[i]) && i !== words.length-1\n                  ? wordDelay + commaDelay : wordDelay;\n\n    //Change current word to colored\n    this.setState({coloredWord: i});\n\n    //After pause, move on to next word\n    setTimeout(function(){\n      return this.colorWord(i+1);\n    }.bind(this), delay);\n  }\n\n\n  queryThought() {\n    //If no tooltip next line\n    if(!this.props.dataTA.tooltips) {\n      this.props.nextLine();\n      return\n    }\n\n    const tooltips = this.props.dataTA.tooltips;\n\n    //Check for match\n    for(let tooltip of tooltips) {\n      if(tooltip.lnOrder === this.props.dataTA.lineOrder) {\n        setTimeout(() => {\n          // this.setState({tooltip: tooltip});\n          this.props.triggerThought(tooltip);\n        }, 600);\n        return\n      }\n    }\n    //No match? Next line\n    this.props.nextLine();\n  }\n\n  closeTT(){\n    setTimeout(() => {\n      this.setState({tooltip: null});\n    }, 200);\n  }\n\n  launchThought(){\n   const range = this.props.thought.range;\n   //start and end for slice\n   let start = range[0] -1,\n   end = range.length === 2 ? range[1] -1 : range[0] -1;\n\n   return this.props.words.map((wordNode, key) => {\n     let colored = false;\n     if(key >= start && key <= end){\n      colored = true;\n     }\n\n     return <Word key={'word_'+ key} colorTA={colored}>{wordNode}</Word>;\n   });\n }\n\n\n  render() {\n    var line = this.renderWords(this.state.coloredWord);\n    if(this.props.className === 'title')\n     line = <h2>{line}</h2>;\n\n    return (\n      <li className = {this.props.className}>\n        {line}\n      </li>\n    )\n  }\n}\n\nexport default LineTA;\n","import React from 'react';  // eslint-disable-line no-unused-vars\nimport Word from './Word.js';\nimport '../styles/Line.css';\n\nfunction LineHover(props){\n\n  const offset =  props.offText ? <span style={{visibility: 'hidden'}}>{props.offText}</span> : false;\n\n  const words = props.children.split(' ').map((word, key) => {\n        const range = props.thought.range;\n\n        //start and end for slice\n        let start = range[0] -1,\n        end = range.length === 2 ? range[1] -1 : range[0] -1,\n        colored;\n\n        if(key >= start && key <= end){\n          colored = true;\n        }\n        return <Word key={`${word}_${key}`} colored={colored}>{word}</Word>;\n  });\n\n  if(props.className === 'title'){\n    return <li key = {props.lineKey} className = {props.className}>\n      {offset} <h2>{words}</h2>\n    </li>\n  }else{\n    return <li key = {props.lineKey} className = {props.className}>\n      {offset} {words}\n    </li>\n  }\n}\n\nexport default LineHover;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay } from '@fortawesome/free-solid-svg-icons';\nimport { Button, Progress} from 'antd';\n\nexport default function Menu(props) {\n  let progress = 0;\n  if(props.completed){\n    progress = 100;\n  }else if(props.lineOrder){\n    progress = Math.round(100 * (props.lineOrder / (props.maxLine + 1)));\n  }\n  return (\n  <ul className='menu'>\n    <li><Button onClick={props.startThinkaloud} size=\"small\">Start &nbsp; <FontAwesomeIcon icon={faPlay} /></Button></li>\n    <li>\n      <Button\n        disabled={props.thought == null}\n        onClick={props.nextLine}\n        size=\"small\"\n      >Next</Button>\n    </li>\n    <li>\n        <Progress percent={progress} size=\"small\" style={{width: '125px'}}/>\n    </li>\n  </ul>\n  )\n}","import React, { Component } from 'react';\nimport debounce from 'lodash/debounce';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRightLong}  from '@fortawesome/free-solid-svg-icons';\nimport '../styles/Thoughts.css';\nimport '../styles/Animate.css'; \n\nexport default class Thoughts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thoughtClicked: false\n    };\n    this.onClick = this.onClick.bind(this);\n    this.onHover = this.onHover.bind(this);\n    this.onMouseLeave = this.onMouseLeave.bind(this);\n    this.debouncedOnHover = debounce(this.onHover, 350);\n  }\n\n  onClick(){\n    if(this.lnOrder !== this.state.thoughtClicked){\n      this.setState({thoughtClicked: this.lnOrder});\n      this.props.nextLine();\n    }else{\n      return\n    }\n  }\n\n  onHover(thought){\n    this.props.hoverThought(thought);\n    this.hovered = true;\n  }\n\n  onMouseLeave(){\n    if(this.hovered){\n      this.props.hoverThought(false);\n      this.hovered=false;\n    }\n    this.debouncedOnHover.cancel();\n  }\n\n  renderThoughts(){\n    if(!this.props.data){\n      return\n    }\n    let orderedThoughts = this.props.data.linesTA.flatMap(line => line.tooltips ? line.tooltips : [])\n    orderedThoughts = orderedThoughts.sort((a, b) => a.lnOrder > b.lnOrder ? 1 : -1);\n\n    return orderedThoughts.map(thought => {\n      if(thought.lnOrder === this.props.thought){\n        this.lnOrder = thought.lnOrder\n        return <li ref={this.thoughtRef} key={thought.lnOrder} onClick={this.onClick} className='active animate__animated animate__fadeIn'>\n          {thought.content}<FontAwesomeIcon className='next' icon={faRightLong} />\n          </li>\n      }else if(thought.lnOrder < this.props.lineOrder || this.props.completed){\n        const classname = this.props.hoveredThought && this.props.hoveredThought.lnOrder === thought.lnOrder ? 'hovered' : '';\n        return(\n        <li key={thought.lnOrder} \n            onMouseEnter={() => this.debouncedOnHover(thought)} \n            onMouseLeave={this.onMouseLeave}\n            className={classname}>\n            {thought.content}\n        </li>)\n      }else{\n        return(\n          <li key={thought.lnOrder} className=\"upcoming\">\n              <span style={{visibility: 'hidden'}}>{thought.content}</span>\n          </li>)\n      }\n    })\n  }\n\n  render(){\n    return (\n      <ul className='thoughts'>\n        {this.renderThoughts()}\n      </ul>\n    )\n  }\n\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport Line from './Line.js';\nimport LineTA from './LineTA.js';\nimport LineHover from './LineHover.js';\nimport Menu from './Menu.js';\nimport Thoughts from './Thoughts.js';\nimport '../styles/ThinkAloud.css';\nimport 'antd/es/spin/style/index.css'; // for css\nimport { Spin } from 'antd';\n\nclass ThinkAloud extends Component {\n\n  componentDidMount() {\n    //Mount api call to start thinkaloud\n    window.soliloquy.start = this.startThinkaloud;\n    \n    var {title, lines} = this.props.data.text;\n    this.lines = lines.slice();\n    this.lines.unshift(title);\n    this.props.setConfig(this.props.data);\n    this.maxLine = this.getMaxLine(this.props.data)\n  }\n\n  componentDidUpdate(nextProps){\n    //calls a line query on lineOrder update\n    if(nextProps.thinkaloud.lineOrder !== this.props.thinkaloud.lineOrder){\n      if(this.props.thinkaloud.running)\n        this.props.queryLines(this.props.thinkaloud.data.linesTA);\n    }\n  }\n\n  componentWillUnmount(){\n    this.props.endThinkaloud();\n  }\n\n  getMaxLine(data){\n    const allLines = data.linesTA.flatMap(line => line.order)\n    return Math.max(...allLines);\n  }\n\n  renderLines() {\n    //compiles lines and handles state changes\n    const { activeLine, lineOrder, hoveredThought } = this.props.thinkaloud;\n    const {linesTA, wordDelay, commaDelay} = this.props.thinkaloud.data;\n    let breakCount = 0;\n    const payload = this.lines.map(function(line, key){\n      //Handles line breaks in data e.g. ''\n      if(line === ''){\n        breakCount++;\n        return <li key={'break_' + breakCount}>&nbsp;</li>;\n      }\n      const lineNum = key - breakCount;\n      const className = key === 0 ? \"title\": \"line\";\n      const words = line.split(' ');\n      const active = activeLine === lineNum ? true : false;\n\n      if(active){\n        return (\n          <LineTA\n            className = {className}\n            key = {'line_' + lineNum}\n            dataTA = {{tooltips: linesTA[lineNum].tooltips, lineOrder}}\n            commaDelay = {commaDelay}\n            words={words}\n            triggerThought={(args) => this.props.triggerThought(args)}\n            thought={this.props.thinkaloud.thought}\n            wordDelay = {wordDelay}\n            nextLine = {this.nextLine.bind(this)}\n          />\n        );\n      }else if(hoveredThought && linesTA[lineNum] && linesTA[lineNum].order.includes(hoveredThought.lnOrder)){\n        return (\n          <LineHover\n          className = {className}\n          key = {'line_' + lineNum}\n          thought={hoveredThought}\n        >{line}</LineHover>\n        )\n      }else{\n      return (\n        <Line\n          className = {className}\n          key = {'line_' + lineNum}\n        >{line}</Line>\n      )\n      }\n    }.bind(this));\n    return payload;\n  }\n\n  nextLine(trigger){\n    const {lineDelay} = this.props.thinkaloud.data;\n    if(trigger === 'user'){\n      this.props.nextLine(trigger);\n    }else{\n      setTimeout(this.props.nextLine.bind(this, trigger), lineDelay);\n    }\n  }\n\n  startThinkaloud = () => {\n    this.props.startThinkaloud(this.props.thinkaloud.data.startingLine);\n  }\n\n  render() {\n    if(!this.props.thinkaloud || !this.props.thinkaloud.data)\n      return null\n\n    const thought = this.props.thinkaloud.thought ? this.props.thinkaloud.thought.lnOrder : null;\n\n    return (\n      <Spin\n        spinning={!this.props.thinkaloud.hasOwnProperty('data')}\n      >\n        <div id=\"ThinkAloud\">\n          <Menu\n            startThinkaloud = {this.startThinkaloud}\n            nextLine = {this.nextLine.bind(this, 'user')}\n            thought={thought}\n            lineOrder={this.props.thinkaloud.lineOrder}\n            maxLine={this.maxLine}\n            completed={this.props.thinkaloud.completed}\n          />\n          <div className=\"content\">\n          <ul className=\"poem\">\n            {this.renderLines()}\n          </ul>\n          <Thoughts\n            lineOrder={this.props.thinkaloud.lineOrder}\n            completed={this.props.thinkaloud.completed}\n            thought={thought}\n            data={this.props.thinkaloud.data}\n            nextLine = {this.nextLine.bind(this, 'user')}\n            hoverThought={this.props.hoverThought}\n            hoveredThought={this.props.thinkaloud.hoveredThought}\n          />\n          </div>\n        </div>\n      </Spin>\n    )\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    thinkaloud: state.thinkaloud,\n    params: state.params\n  };\n}\n\nexport default connect(mapStateToProps, actions)(ThinkAloud);\n","export function getSafe(fn, defaultVal=false) {\n  try {\n      return fn();\n  } catch (e) {\n      return defaultVal;\n  }\n}\n\nexport function isValidURL(str) {\n  var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n  '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|'+ // domain name\n  '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n  '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n  '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n  '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n  return pattern.test(str);\n}\n\nexport function isObject(obj){\n  return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]'\n}\n\nexport function isJson(item) {\n  try {\n      item = JSON.parse(item);\n  } catch (e) {\n      return false;\n  }\n\n  if (typeof item === \"object\" && item !== null) {\n      return item;\n  }\n\n  return false;\n}\n\nexport function getServerUrl(scriptUrl){\n  if(!scriptUrl)\n    return false\n\n  let serverUrl = new URL(scriptUrl);\n\n  //Sets serverUrl by default to origin used in script\n  if(process.env.NODE_ENV !== \"development\"){\n    const strIndex = serverUrl.pathname.indexOf(\"/code/ThinkAloud.js\");\n    const urlPath = strIndex > 0 ? serverUrl.pathname.substr(0, strIndex) : '';\n    return serverUrl.origin + urlPath;\n  }else{\n    return serverUrl.origin;\n  }\n}","import { combineReducers } from 'redux';\nimport thinkaloud from './thinkaloud.js';\nimport params from './params.js';\n\nconst rootReducer = combineReducers({\n  thinkaloud,\n  params\n});\n\nexport default rootReducer;\n","export default\nfunction thinkaloud(state = {\n\n}, action){\n  switch(action.type) {\n    case 'GET_LINEDATA':\n      return Object.assign({}, state, {\n        lineData: action.lineData\n      });\n    case 'USER_NEXT_LINE':\n    case 'NEXT_LINE':\n      return Object.assign({}, state, {\n        lineOrder: state.lineOrder + 1,\n        thought:null\n      });\n    case 'SELECT_LINE':\n      return Object.assign({}, state, {\n        activeLine: action.activeLine\n      });\n    case 'START_THINKALOUD':\n      return Object.assign({}, state, {\n        lineOrder: action.lineNum, running: true\n      });\n    case 'END_THINKALOUD':\n      return Object.assign({}, state, {\n        activeLine: null, running: false, lineOrder: null, completed: true\n      });\n    case 'TRIGGER_THOUGHT':\n      return Object.assign({}, state, {\n        thought: action.thought\n      });\n    case 'HOVER_THOUGHT':\n      return Object.assign({}, state, {\n        hoveredThought: action.thought\n      });\n    case 'SET_CONFIG':\n      return Object.assign({}, state, {\n        data: action.data\n      });\n    default:\n      return state;\n  }\n}\n","export default\nfunction params(state = {}, action){\n  switch(action.type) {\n    case 'SET_PARAMS':\n      return action.params;\n    default:\n      return state;\n  }\n}\n","//Stores references to callbacks\nconst callbacks = {}\n\n//Initalize window object\nwindow.soliloquy = {};\n\n//Attaches callback to object for reference\nwindow.soliloquy.on = (action, callback) => callbacks[action] = callback;\nwindow.soliloquy.onComplete = (callback) => callbacks[\"onComplete\"] = callback;\n\nexport const listeners = store => next => action => {\n  if(!action) return;\n  switch(action.type) {\n    case \"END_THINKALOUD\":\n      if(callbacks[\"onComplete\"]){\n        //Custom logic here\n        callbacks[\"onComplete\"]({}, store.getState());\n      }\n      break;\n    default:\n      if(callbacks[action.type]) callbacks[action.type](action, store.getState());\n      break;\n  }\n\n  if(callbacks[\"ALL\"]) callbacks[\"ALL\"](action, store.getState());\n\n  let result = next(action)\n  return result\n}","//logging middleware\nimport axios from 'axios';\nimport statements from '../exampleXAPI.json';\n\n//This is an example of how to add logging (in XAPI format) as middleware.\nexport const logging = store => next => action => {\n  if(!action) return;\n\n  const time = new Date(Date.now()).toISOString();\n  const { actor, auth, moreInfo, serverUrl } = store.getState().params;\n\n  let statement, systemMsg;\n\n  switch(action.type) {\n    case \"START_THINKALOUD\":\n      statement = statements.start;\n      break;\n    case \"USER_NEXT_LINE\":\n      statement = statements.nextLine;\n      break;\n    case \"END_THINKALOUD\":\n      statement = statements.complete;\n      break;\n    default:\n      break;\n  }\n  if(statement){\n    statement.actor = actor;\n    statement.timestamp = time;\n    statement.object.moreInfo = moreInfo;\n    //Add code to send log to your server \n    // axios.post(serverUrl + '/log/xapi', statement, {auth}).catch(err => {\n    //   console.log(err);\n    // });\n  }else if(systemMsg){\n    //Add code to send log to your server\n    // axios.post(serverUrl + '/log/system', systemMsg, {auth}).catch(err => {\n    //   console.log(err);\n    // });\n  }\n\n  let result = next(action)\n  return result\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ThinkAloud from './ThinkAloud/ThinkAloud.js';\nimport { Provider } from 'react-redux';\nimport cssImports from './imports.module.css';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { isJson, isValidURL, isObject, getServerUrl} from './util.js';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport { message } from 'antd';\nimport reducers from './reducers';\nimport { listeners } from './middleware/api';\nimport { logging } from './middleware/logging';\nimport reduxThunk from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/es/message/style/index.css';\nimport 'antd/es/button/style/index.css';\nimport 'antd/es/progress/style/index.css';\n\n\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nwindow.soliloquy.renderThinkAloud = async function(id, data, params = {}){\n  let taData;\n  if(!id || !data){\n    console.log(\"Missing parameter: renderThinkAloud requires DOM id and config\")\n    return\n  }\n\n  if(typeof data === 'string' && isValidURL(data)){\n    try{\n      const res = await axios.get(data);\n      taData = res.data;\n    }catch(e){\n      message.error(e.message);\n      console.log(e);\n    }\n  } else if(typeof data === 'string'){\n    taData = isJson(data);\n  }else if(isObject(data)){\n    taData = data;\n  }\n\n  if(!taData){\n    console.log(\"Error, config data not provided or invalid\");\n    return;\n  }\n\n  const domTarget = document.getElementById(id);\n\n  if(!domTarget){\n    console.log(\"Error, target element not found to render the table\");\n    return;\n  }\n\n  window.soliloquy.domTarget = domTarget;\n\n  //Add uuid if no user\n  if(!params.name)\n    params.name = uuidv4();\n\n  const middleware = params.logging === true ?  [reduxThunk, logging, listeners] : [reduxThunk, listeners] ;\n  \n  const store = process.env.NODE_ENV === 'development' \n      ? createStore(reducers, {params}, reduxDevTools(applyMiddleware(...middleware)))\n      : createStore(reducers, {params}, applyMiddleware(...middleware));\n\n  ReactDOM.render(\n    <Provider store={store}>\n        <ThinkAloud data={taData} />\n    </Provider>\n    , document.getElementById(id)\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}